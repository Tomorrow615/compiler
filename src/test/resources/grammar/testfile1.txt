// 全局区
const int g_const_val = 100, g_c2 = 2;
const int g_c3 = g_c2 + 8;
int g_arr[5] = {10, 20};
int g_side_effect = 0;

// 函数区
int trigger_func() {
    g_side_effect = g_side_effect + 1;
    return 1;
}

void func_void() {
    return;
}

int func_multi_param(int p1, int p2) {
    return p1 * p2 - 10;
}

void multi_static_test() {
    static int s_var1 = 0, s_var2 = 10;
    s_var1 = s_var1 + 1;
    s_var2 = s_var2 + s_var1;
    printf("Multi-static vars value: %d\n", s_var2);
}

// --- 新增内容: 专门用于覆盖单个静态变量声明 ---
void single_static_test() {
    static int s_single = 50;
    s_single = s_single + 1;
    printf("Single static var value: %d\n", s_single);
}

int main() {
    printf("23371300\n"); // #1

    int uninitialized_var;
    int a = 10, b = 3;
    int result = (a * b) + g_c3 / 5 - (a % b);
    result = -result;
    // printf("Complex Expr Result: %d\n", result); // #2

    if (result > 0) {
    } else if (result == -31 && g_c2 != 3) {
        printf("Relational Ops Check: %d\n", 1); // #3
    }

    int i = 0, sum = 0;
    for(i = 0; i < 10; i = i + 1) {
        if (i <= 4) {
            continue;
        }
        sum = sum + i;
        if (i >= 8) {
            break;
        }
    }
    printf("Loop sum (5+6+7+8): %d\n", sum); // #4

    multi_static_test(); // #5
    multi_static_test(); // #6

    int multi_ret = func_multi_param(a, b);
    printf("Multi-param func result: %d\n", multi_ret); // #7

    if (0 && trigger_func()) { }
    if (1 || trigger_func()) { }
    printf("Side effect after short-circuit: %d\n", g_side_effect); // #8

    // --- 修改内容: 调用新函数以覆盖最后一点 ---
    single_static_test(); // #9, s_single 变为 51
    single_static_test(); // #10, s_single 变为 52

    // 覆盖: 逻辑非'!'单目运算符
    int flag = 0;
    if (!flag) {
        printf("Logical NOT test passed: %d\n", 1); // #9
    }

    // 仅用于覆盖率分析的for循环
    for ( ; ; i = i + 1) { break; }
    for ( ; i < 1; ) { i=i+1; break; }
    for ( i = 0; ; ) { break; }

    return 0;
}